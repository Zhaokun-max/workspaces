# 结构化文件存储
- xml json
- 为了解决不同设备之间信息交换
- xml，
- json

# xml文件
- 参考资料 百度

- xml(extensibleMarkpLanguage) 可扩展标记语言
    - 标记语言，语言中使用尖括号起来的文本字符串标记
    - 可扩展，用户可以自己定义需要的标记
    - 例如：

            <Teacher>
                自定义标记Teacher
                在两个标记之间任何内容都应该与teacher相关
            <Teacher>
    - 是w3c组织制定的一个标准
    - xml描述的是数据本身，即数据的结构和语义
    - html侧重于如何显示web页面中的数据
- xml文档的构成
    - 处理指令
        - 最多只有一行
        - 且必须在第一行
        - 内容是与xml本身处理相关的一些和声明和指令
        - 以xml关键字开头
        - 在xml文件中能出现一次切必须在开头
        - 一般用于声明xml的版本和采用的
        - version属性时必须的
        - encoding属性用来支出xml解释器使用的编码
    - 根元素
        - 在整个xml中，可以把他看做一个树形结构
        - 根元素只能有一个
    - 子元素
    - 属性
    - 内容
        - 表明标签所存储的信息
    - 注释
        - 起说明作用的信息
        - 注释不能嵌套在标签里面
        - 只有在注释的开始喝结尾使用双短横线
        - 三短横线只能出现在注释的开头而不能用在结尾
        - <!-- wang -->
        - <!---pan-da-->
-保留字符的处理
    - xml中使用的符号可能跟实际使用的符号相冲突，典型就是尖括号
    - 使用实体引用（EntiyReferenec）来表示保留字符

            <score> score&gt;>80 </score>
    - 把含有保留字符的部分放在CDATA块内部，CDATA块把内部信息视为不需要转义

              <![CDATA[
                    select * from Student
                    where score>80
                    ]]>

    - 常用的需要转义的保留字符和对应实体应用
        - &:  &amp;
        - <:  &lt;
        - >:  &gt;
        - ':  &apos;
        - ":  &quot;
        - 一共五个，每个实体引用都以&开头并且以分号结尾

- xml标签的命名规则
    - Pascal 命名法
    - 用单词表示 第一个字母大写
    - 大小写严格区分
    - 配对的标签必须一致
- 命名空间
    - 为了防止命名冲突

        <Student>
            <name>panda</name>
            <age>18</age>
            <haha>dsa</haha>
        </Student>

        <Room>
            <name>panda</name>
            <haha>dsa</haha>
        </Room>
    - 如果归并两个内容信息，会产生冲突

        <Schooles>
            <name>panda</name>
            <age>18</age>
            <haha>dsa</haha>
            <name>panda</name>
            <haha>dsa</haha>
         </Schooles>

    - 为了避免冲突，需要给可能冲突元素添加命名空间
        - xmlns:  xml name space 的缩写

            <Schooles xmlns:student="http://my_student" xmlns:room="http://my_room">
                <Student:name>panda</Student:name>
                <age>18</age>
                <haha>dsa</haha>
                <room:name>panda<room:/name>
                <haha>dsa</haha>
            </Schooles>



# xml访问
- xml读取分为主要技术 SAX  DOM
- SAX（Simple API for XML）
    - 基于事件驱动的API
    - 利用SAX解释文档设计到解析器和事件处理两部分
    - 特点：
        - 快
        - 流式读取

- Dom
    - 是w3c规定的xml编程接口
    - 一个XML文件在缓存中以树形结构保存，读取
    - 用途
        - 定位浏览xml任何一个节点信息
        - 添加删除相应内容
    - minidom
        - minidom.parse(filename)：加载读取的xml文件，filename也可以是xml代码
        - doc.documentElement：获取xml文档对象，一个xml文件只有一个对于的温度囊对象
        - node.getAttribute(attr_name):获取xml节点的属性值
        - node.getElementByTagName(tage_name)：得到一个节点对象集合
        - node.childNodes：得到所有孩子节点
        - node.childNodes[index].nodeValue:获取单个节点值
        - node.fristNode:得到一个节点，等价于node.childNodes[0]
        - node.attributes[tage_name]

    -etree
        - 以树形结构表示xml
        - root.getiterator:得到相应的可迭代的node集合
        - root.iter
        - find(node_name):查找指定node_name的节点，返回一个node
        - root.findll(node_name):返回多个node_name的节点
        - node.tag：node对应的tagename
        - node.text：node的文档值
        - node.attrib：是node的属性字典的典型的内容

- xml文件写入
    - 更改
        - ele.set：修改属性
        - ele.append：添加子元素
        - ele.remove：删除子元素


