# oop python 面向对象
# 面向对象编程
  基础
  共有私有
  继承
  组合 Mixin
魔法函数
  魔法函数概述
  构造类魔法函数
  运算类魔法函数
面向对象 ObjectOriented OO
opp思想
  - 接触到任意一个任务，首先想到的是任务这个世界的构成，是由模型构成的
几个名词
  - OO：面向对象
  - OOA:面向对象分析
  - OOD：面向对象设计
  - OOI：xxx的实现
  - OOP：xxx的编程
  - OOA->OOD->OOI 面相对象的实现过程
# 类的基本实现`
 - 类的命名
   - 遵守变量名的规范
   - 大驼峰  (由一个或者多个单词构成，每个单词首字母大写，单词个单词直接相连)
   - 避开跟系统命名相似的命名
# 如何声明一个类
   - 必须用class关键字
   - 类由属性和方法，其他不允许出现
   - 成员属性定义可以直接使用变量赋值，如果没有值，使用None
   - 案例jc - 10.py
- 实例化类
    - 变量 = 类名() 实例化一个对象
- 访问对象成员
    -使用点操作符
    
            obj.成员属性名称
            obj.成员方法
- 可以通过默认内置变量检查类和对象所有成员
     -对象所有成员检查
     
            # dict 前后各有两个下划线
            obj.__dict__
     - 类所有成员
     
            # dict前后各有两个下划线
            class_name.__dict__
            
            
   
# 3.nanonda 基本使用
- anaconda 主要是一个虚拟环境管理器
- conde list 显示anaconda安装的包
- conde env list:显示anaconda的虚拟环境列表
- conda create -n xxx python=3.6 创建python版本为3.6虚拟环境，名称为xxx
- 激活  activate oop
- 禁用  deactivate

# py 11 - 00
# 4.类和对象的成员分析
- 类和对象都可以存储成员，成员可以归类所有，也可以归对象所有
- 类存储成员时使用的是与类关联的一个对象
- 对象存储成员是存储在当前对象中
- 对象访问一个成员，如果对象中没有该成员，尝试访问类中的同名成员，
    如果对象中有此成员，一定使用对象中成员 
    
- 创建对象的时候，类中的成员不会自动放入对象里，而是得到一个空对象，没有成员
- 通过对象对类中成员重新复制或通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员对象

# 5.关于self
- self 在对象的方法中表示当前对象本身，如果通过对象调用一个方法，那么该对象会自动传入到当前方法的第一个参数中
- self并不是关键字，只是一个用于接收对象的普通参数，理论上可以用任何一个普通变量名代替
- 方法中有self形参的方法称为非绑定类的方法，可以通过对象访问
     没有self的是绑定类的方法，只能通过类访问
- 使用类访问绑定类的方法时，如果累方法中需要访问当前类的成员，可以通过
     __class__成员名来访问
     
# 6.面向对象三大特性
- 封装 
- 继承
- 多态

# 6.1 封装
- 封装就是对对象成员进行访问限制
- 封装三个级别
     - 公开，public
     - 受保护的，protectd
     - 私有的，private
     - public，protectd，private不是关键
判别对象的位置
   - 对象内部
   - 对象外部
   - 子类中
   python  下划线 使用 百度
私有
   - 私有成员是最高级别的封装，只能在当前类或对象中访问
   - 在成员前面添加两个下划线即可
            class person():
                # name 是共有的成员
                name = "panda"
                # __age就是私有成员
                __age = 18
   - python的私有不是真私有，是一种成为name mangling的改名策略
   可以使用对象__classname__attributename访问
- 受保护的封装，protected
    - 受保护的封装是将对象成员进行一定级别的封装，然后，在类中或者子类中
         都可以进行访问，但是外部不可以
    - 封装方法：在成员名称前加一个下划线即可
- 公开的，公共的  public
    - 公共的封装实际对成员没有任何操作，任何地方都可以访问
    
# 3.2继承
- 继承就是一个类可以获得另外有一个类中的成员属性和成员方法
- 继承的作用：减少代码，增加代码的复用功能同时可以设置类与类直接的关系
- 继承与被继承的概念
    - 被继承的类叫父类，也叫基类，也叫超类
    - 用于继承的类叫子类，也叫派生类
    - 继承与被继承一定存在一个 is-a 关系
- 继承的语法
#  继承的语法
# 在python中  任何类都有一个共同的父类叫object
class Person():
    name = "panda"
    age = 19
    def sleep(self):
        print("sleep...")
# 父类在括号里
class Teacher(Person):
    pass

t = Teacher
print(t.name)
print(Teacher.name)


- 继类的特征
    - 所有的类都继承自object类，即所有的类都是object类的子类
    - 子类一旦继承父类，则可以使用父类中除私有成员外的所有内容
    - 子类继承父类后并没有将父类成员完全赋值到子类中，而是通过引用关系访问调用
    - 子类中可以定义独有的成员属性和方法
    - 子类中定义的成员和父类成员如果相同，则优先使用子类成员
    - 子类如果想扩充父类的方法，可以在定义新方法的同时访问父类成员进行代码重用
        可以使用父类名.父类成员 的格式来调用父类成员，也可以使用super().父类成员
- 继承变量函数的查找顺序问题
    - 任何情况有限查找自己变量
    - 没有则查找父类 
    - 构造函数如果本类中没有定义，则自动查找调用父类的构造函数
    - 如果本类由定义，则不在继续向上查找
- 构造函数
    - 是一类特殊的函数，在类进行实例化之前进行调用
    - 如果定义构造函数，则实例化使用构造函数，不查找父类构造函数
    - 如果没定义，则自动查找父类构造函数
    - 如果子类没定义，父类构造函数带参数，则构造对象时的参数应该按父类参数构造
- super
    - super不是关键字，而是一个类
    - super的作用是获取MRO(MethodResolustionOrder)列表中的第一个类
    - super与父类直接没有任何实质性关系，但通过suepr可以直接调用父类
    - super的使用方法，参见构造函数中调用父类的构造函数
# 13 oop
- 单继承和多继承
    - 单继承：每个类只能继承一个类
    - 多继承：每个类允许继承多个类
- 单继承和多继承的优缺点
    - 单继承
        - 传承有序逻辑清晰，语法简单，隐患少
        - 功能不能无限扩展，只能在当前唯一的继承中扩展
    - 多继承
        - 优点：类的功能扩展方便
        - 缺点：继承关系混乱

- 另行继承/钻石继承
    - 多个子类继承同一个父类，这些子类由内一个类继承，于是关系继承图形成一个菱形图谱
    - MRO 菱形继承百度
    - 关于多继承的MRO
        - MRO就是多继承中，用于保存继承顺序的一个列表
        - python本身采用C3算法来多继承的菱形继承进行计算的结果
        - MRO计算原则
            - 子类永远在父类前面
            - 如果多个父类，则根据继承语法中括号内类的书写顺序存放
            - 如果多个类继承了同一个父类，子类中只会选取继承语法中的第一个父类的父类
            
        - 构造函数
            - 在对象进行实例化的时候，系统自动调用的一个函数叫构造函数
                通常此函数用来对实例对象进行初始化，顾名
            - 构造函数一定要有，如果没有，则向上自动查找，按照MRO顺序，找到为止

- #3.3多态
- 多态就是同一个对象在不同情况下有不同的状态出现
- 多态不是语法，是一种设计思想
- 多态性：一种调用方式，不同的执行结果
- 多态，同一种事务的多种形态，动物分为人类，狗类，猫类
- 多态和多态性，百度

- Mixin设计模式
    -  主要采用多继承方式对类的功能记性扩展
    -  mixin概念 百度
    -  MRO 百度
    
- 使用多继承语法来实现Mixin
- 使用mixin实现多继承的时候小心
    -   首先他必须表示某一单一功能，而不是物品
    -   职责必须单一，如果由多个功能，则写多个Mixin
    -   Mixin不能依赖于子类的实现
    -   子类即使没有继承Mixin类，也能照样工作，只是缺少了某个功能
- 优点：
    - 使用Mixin可以在不对类进行任何修改的情况下，扩充功能
    - 可以方便的组织和维护不同功能组件的划分
    - 可以根据需要任意调整功能类的组合
    - 可以避免创建很多的新类，导致类的继承混乱
    
- # 4.类相关函数
    - issubclass：检测一个类是否是另一个类的子类
    - itinstance：检测一个对象是否是一个类的实例
    - hasattr：检测一个对象是否有成员XXX  就是变量
    - getatter：get attribute 
    - setattr：set attribute 
    - delattr： delete attribute 
    - dir： 获取对象的成员列表
   
# 5.类的成员描述符，（属性)
- 类的成员描述符是为了在类中对类的成员属性 进行相关操作而创建的一种方式 
    - get：获取属性的操作
    - set：修改或者添加属性
    - delete：删除属性的操作
- 如果想使用类的成员描述符，大概有三种方法
    -   使用类实现描述器
    -   使用属性修饰符
    -   使用property函数
        - peoperty函数简单
        - property(fget，fast，fdel，doc)
    
- 无论哪种修饰符都是为了对成员属性进行相应的控制
    - 类的方式：适合多个类中的多个属性共用一个描述符
    - property：使用当前类中适用，可以控制一个类中的多个属性
    - 属性修饰符：适用于当前类中使用，控制一个类类中的一个属性
   
# 6.类的内置属性
           
           __dict__ :已字典的方式显示类的成员组成
           __doc__：获取类的文档信息
           __name__：获取类的名称，如果在模块中使用，获取模块的名称
           __bases__：获取某个类的所有父类，以元组的方式显示
           
# 7.类的常用魔术方法
    - 魔术方法就是不需要人为调用的方法，基本是特定的时刻自动触发
    - 魔术方法统一特征，方法名被前后各两个下滑线包裹
- 操作类
    - __init__：构造函数
    - __new__ ：对象实例化方法，此函数特殊，一般不需要使用
    - ___call_：对象当函数使用的使用触发
    - __str__：当对象呗当做字符串使用的时候调用
    - __repr__：返回字符串，跟str具体区别百度

- 描述符相关
    -  __set__
    -  __get__
    -  __delete__

-属性操作相关
    __getattr__：访问一个不存在的属性触发
    __setattr__：对成员属性进行设置的时候触发
        - 参数
            - self用来获取当前对象
            - 被设置的属性名称，以字符串形势出现
            - 需要对属性名称设置的值
            - 作用：进行属性设置的时候进行验证或修改
            - 注意，该方法中不能对属性直接进行赋值操作，否则死循环
- 运算分类相关魔术方法
    - __gt__:进行大于判断的时候触发的函数
        - 参数
             - self
             - 第二个参数是第二个对象
             - 返回值可以是任意值，推荐返回布尔值
            
# 类和对象的三种方法
- 实例方法
    - 需要实例化对象才能使用的方法，使用过程中可能需要截止对象的其他对象的方法完成
- 静态方法
    - 不需要实例化，通过类直接访问
- 类方法
    - 不需要实例化
- 三个方法具体区别百度

# 9.所用软件
- 画图软件是Faststone capture

# 抽象类
- 抽象方法  ：没有具体实现内容的方法成为抽象方法
- 抽象方法主要意义是规范子类的行为和接口
- 抽象类的使用需要借助abc模块
        import abc
        
- 抽象类：包含抽象方法的类叫抽象类，通常成为ABC类
- 抽象类的使用
    - 抽象类可以包含抽象方法，可以使用具体方法
    - 抽象类中可以有方法也可以有属性
    - 抽象类不允许直接实例化
    - 必须继承才可以使用，且继承的子类必须实现所有继承来得抽象方法
    - 假定子类没有实现所有继承的抽象方法，则子类也不能被实例化
    - 抽象类的主要作用是设定类的标准，已便于开发具体统一的规范
# 11.自定义类
- 类 其实是一个类定义和各种方法的自由组合
- 可以定义类和函数，然后自己通过类直接赋值
- 可以借助于MethodType实现
- 借助于type实现
       
